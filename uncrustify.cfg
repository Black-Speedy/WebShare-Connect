# Add or remove unnecessary parentheses on 'return' statement.
mod_paren_on_return             = remove   # ignore/add/remove/force

# The number of columns to indent per level. Usually 2, 3, 4, or 8.
#
# Default: 8
indent_columns                  = 4        # unsigned number

# How to use tabs when indenting code.
#
# 0: Spaces only
# 1: Indent with tabs to brace level, align with spaces (default)
# 2: Indent and align with tabs, using spaces when not on a tabstop
#
# Default: 1
indent_with_tabs                = 0        # unsigned number

#
# ---- Space Options ----
#

# Add or remove space around compare operator '<', '>', '==', etc.
sp_compare                      = add   # ignore/add/remove/force

# Add or remove space between 'return' and '('.
sp_return_paren                 = add   # ignore/add/remove/force

# Add or remove space between 'sizeof' and '('.
sp_sizeof_paren                 = remove   # ignore/add/remove/force

# Add or remove space after ')' of control statements.
sp_after_sparen                 = add   # ignore/add/remove/force

# Add or remove space before '(' of control statements ('if', 'for', 'switch',
# 'while', etc.).
sp_before_sparen                = add   # ignore/add/remove/force

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs. 'cast(int) a' or
# '(int)a' vs. '(int) a'.
sp_after_cast                   = remove   # ignore/add/remove/force

sp_inside_braces		        = remove		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		    = remove		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		    = remove		# "{ 1 }" vs "{1}"

# Add or remove space inside function '(' and ')'.
sp_inside_fparen                = remove   # ignore/add/remove/force

# Add or remove space inside '(' and ')' of control statements other than
# 'for'.
sp_inside_sparen                = remove   # ignore/add/remove/force

# Add or remove space inside a non-empty '[' and ']'.
sp_inside_square                = remove   # ignore/add/remove/force

# Add or remove space inside '[]'.
# if empty.
sp_inside_square_empty          = remove   # ignore/add/remove/force

# Add or remove space between return type and function name. A minimum of 1
# is forced except for pointer return types.
sp_type_func                    = add   # ignore/add/remove/force

# Add or remove space around assignment operator '=', '+=', etc.
sp_assign                       = add   # ignore/add/remove/force

# Add or remove space around non-assignment symbolic operators ('+', '/', '%',
# '<<', and so forth).
sp_arith                        = add   # ignore/add/remove/force

# Add or remove space around boolean operators '&&' and '||'.
sp_bool                         = add   # ignore/add/remove/force

# Add or remove space around compare operator '<', '>', '==', etc.
sp_compare                      = add   # ignore/add/remove/force

# Add or remove space around assignment operator '=', '+=', etc.
sp_assign                       = add   # ignore/add/remove/force

# Add or remove space after ',', i.e. 'a,b' vs. 'a, b'.
sp_after_comma                  = add   # ignore/add/remove/force

# Add or remove space between alias name and '(' of a non-pointer function type typedef.
sp_func_def_paren               = remove   # ignore/add/remove/force

# Add or remove space between function name and '(' on function calls.
sp_func_call_paren              = remove   # ignore/add/remove/force

# Add or remove space between function name and '(' on function declaration.
sp_func_proto_paren             = remove   # ignore/add/remove/force

# Add or remove space after pointer caret '^', if followed by a word.
sp_after_ptr_block_caret        = add   # ignore/add/remove/force

#
# --- Align Options ---
#

# Whether to use tabs for aligning.
align_with_tabs                 = false    # true/false
align_on_tabstop		        = FALSE		# align on tabstops

# The span for aligning on '=' in enums.
#
# 0: Don't align (default).
align_enum_equ_span             = 1        # unsigned number

# Whether and how to align backslashes that split a macro onto multiple lines.
# This will not work right if the macro contains a multi-line comment.
#
# 0: Do nothing (default)
# 1: Align the backslashes in the column at the end of the longest line
# 2: Align with the backslash that is farthest to the left, or, if that
#    backslash is farther left than the end of the longest line, at the end of
#    the longest line
# 3: Align with the backslash that is farthest to the right
align_nl_cont                   = 1        # unsigned number

# The span for aligning variable definitions.
#
# 0: Don't align (default).
align_var_def_span              = 1        # unsigned number

# The threshold for aligning variable definitions.
# Use a negative number for absolute thresholds.
#
# 0: No limit (default).
align_var_def_thresh            = 0        # number

# Whether to align inline struct/enum/union variable definitions.
align_var_def_inline            = true    # true/false

# How to consider (or treat) the '*' in the alignment of variable definitions.
#
# 0: Part of the type     'void *   foo;' (default)
# 1: Part of the variable 'void     *foo;'
# 2: Dangling             'void    *foo;'
# Dangling: the '*' will not be taken into account when aligning.
align_var_def_star_style        = 1       # unsigned number

# Whether to align the colon in struct bit fields.
align_var_def_colon             = true    # true/false

# The span for aligning on '=' in assignments.
#
# 0: Don't align (default).
align_assign_span               = 1        # unsigned number

# The threshold for aligning on '=' in assignments.
# Use a negative number for absolute thresholds.
#
# 0: No limit (default).
align_assign_thresh             = 12        # number

# The span for aligning struct initializer values.
#
# 0: Don't align (default).
align_struct_init_span          = 1        # unsigned number

# The span for aligning struct/union member definitions.
#
# 0: Don't align (default).
align_var_struct_span           = 99        # unsigned number

# The span for aligning comments that end lines.
#
# 0: Don't align (default).
align_right_cmt_span            = 3        # unsigned number

# The span for aligning on '#define' bodies.
#
# =0: Don't align (default)
# >0: Number of lines (including comments) between blocks
align_pp_define_span            = 3        # unsigned number

# The minimum space between label and value of a preprocessor define.
align_pp_define_gap             = 4        # unsigned number

# Whether to right-align numbers.
align_number_right              = true    # true/false

# # The span for aligning single-line typedefs.
#
# 0: Don't align (default).
align_typedef_span              = 5        # unsigned number

# The minimum space between the type and the synonym of a typedef.
align_typedef_gap               = 3        # unsigned number

# Whether to put a star on subsequent comment lines.
cmt_star_cont                   = true    # true/false

#
# ---- Newline options ----
#

nl_start_of_file		        = remove

nl_end_of_file			        = remove

nl_before_block_comment         = 2

# The number of newlines after '}' of a multi-line function body.
#
# Overrides nl_min_after_func_body and nl_max_after_func_body.
nl_after_func_body              = 2        # unsigned number

nl_after_func_proto_group 	    = 2

# Add or remove newline between '=' and '{'.
nl_assign_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'else'.
nl_brace_else                   = remove   # ignore/add/remove/force

# Add or remove newline between 'else' and '{'.
nl_else_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'else if' and '{'. If set to ignore,
# nl_if_brace is used instead.
nl_elseif_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'for' and '{'.
nl_for_brace                    = remove   # ignore/add/remove/force

# Add or remove newline between 'while' and '{'.
nl_while_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'switch' and '{'.
nl_switch_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between a function call's ')' and '{', as in
# 'list_for_each(item, &list) { }'.
nl_fcall_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'struct and '{'.
nl_struct_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'union' and '{'.
nl_union_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'enum' and '{'.
nl_enum_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'do' and '{'.
nl_do_brace                     = remove   # ignore/add/remove/force

# Add or remove newline between a function name and the opening '(' in the
# declaration.
nl_func_paren                   = remove   # ignore/add/remove/force

# Add or remove newline between function signature and '{'.
nl_fdef_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'if' and '{'.
nl_if_brace                     = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'while' of 'do' statement.
nl_brace_while                  = remove   # ignore/add/remove/force

# Whether to add a newline after '}'. Does not apply if followed by a
# necessary ';'.
nl_after_brace_close            = true    # true/false

nl_after_if = 2          # Newline after '}'
nl_after_for = 2         # Newline after '}'
nl_after_while = 2       # Newline after '}'
nl_after_switch = 2      # Newline after '}'
nl_after_do = 2          # Newline after '}'

# Add or remove newline between a function name and the opening '(' in the
# declaration.
nl_func_paren                   = remove   # ignore/add/remove/force

# Whether to remove blank lines before '}'.
eat_blanks_before_close_brace   = true    # true/false
eat_blanks_after_open_brace     = true    # true/false

# Add or remove space between ')' and '{' of function.
sp_fparen_brace                 = add   # ignore/add/remove/force

# Add or remove space between '}' and 'else' if on the same line.
sp_brace_else                   = add   # ignore/add/remove/force

# Add or remove space between 'else' and '{' if on the same line.
sp_else_brace                   = force   # ignore/add/remove/force

# Whether to indent the code between #if, #else and #endif.
pp_if_indent_code               = true    # true/false


#
# ---- Pointer star options ----
#

# Add or remove space between a qualifier and a pointer star '*' that isn't
# followed by a variable name, as in '(char const *)'. If set to ignore,
# sp_before_ptr_star is used instead.
sp_qualifier_unnamed_ptr_star   = add   # ignore/add/remove/force

# Add or remove space before a pointer star '*', if followed by a function
# prototype or function definition. If set to ignore, sp_before_ptr_star is
# used instead.
sp_before_ptr_star_func         = add   # ignore/add/remove/force

# Add or remove space between pointer stars '*', as in 'int ***a;'.
sp_between_ptr_star             = remove   # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by a function
# prototype or function definition.
#
# Overrides sp_after_ptr_star and sp_type_func.
sp_after_ptr_star_func          = remove   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a word.
#
# Overrides sp_type_func.
sp_after_ptr_star               = remove   # ignore/add/remove/force  

# Add or remove space before pointer star '*'.
sp_before_ptr_star              = add   # ignore/add/remove/force

# Add or remove space between 'do' and '{'.
sp_do_brace_open                = add   # ignore/add/remove/force

# Add or remove space between '}' and 'while'.
sp_brace_close_while            = add   # ignore/add/remove/force